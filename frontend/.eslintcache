[{"/home/alijm/FinalProject/frontend/src/index.js":"1","/home/alijm/FinalProject/frontend/src/App.js":"2","/home/alijm/FinalProject/frontend/src/reportWebVitals.js":"3","/home/alijm/FinalProject/frontend/src/components/containers/AppContainer.js":"4","/home/alijm/FinalProject/frontend/src/api.js":"5","/home/alijm/FinalProject/frontend/src/theme.js":"6","/home/alijm/FinalProject/frontend/src/components/containers/FormContainer.js":"7","/home/alijm/FinalProject/frontend/src/components/pages/logIn.js":"8","/home/alijm/FinalProject/frontend/src/components/pages/logOut.js":"9","/home/alijm/FinalProject/frontend/src/components/pages/customers/register/register.js":"10","/home/alijm/FinalProject/frontend/src/components/pages/customers/register/citySelect.js":"11","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/allTechnicians.js":"12","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/results.js":"13","/home/alijm/FinalProject/frontend/src/components/pages/technicians/appointments/schedule.js":"14","/home/alijm/FinalProject/frontend/src/components/pages/home/guestHome.js":"15","/home/alijm/FinalProject/frontend/src/components/pages/home/customerHome.js":"16","/home/alijm/FinalProject/frontend/src/components/pages/home/technicianHome.js":"17","/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/customerHeader.js":"18","/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/guestHeader.js":"19","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/technicianHeader.js":"20","/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/customerDropDownMenu.js":"21","/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/guestDropDownMenu.js":"22","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/technicianDropDownMenu.js":"23","/home/alijm/FinalProject/frontend/src/components/pages/technicians/register/register.js":"24","/home/alijm/FinalProject/frontend/src/components/pages/technicians/register/categorySelect.js":"25","/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/notifications.js":"26","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/ratings.js":"27","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/requestAppointment.js":"28","/home/alijm/FinalProject/frontend/src/components/pages/technicians/appointments/approvalAppointments.js":"29","/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/allTechnicians.js":"30","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/notifications.js":"31","/home/alijm/FinalProject/frontend/src/components/pages/customers/profile/profile.js":"32","/home/alijm/FinalProject/frontend/src/components/pages/technicians/profiles/profile.js":"33","/home/alijm/FinalProject/frontend/src/components/pages/customers/appointments/completedAppointments.js":"34","/home/alijm/FinalProject/frontend/src/components/pages/customers/chat/chat.js":"35","/home/alijm/FinalProject/frontend/src/components/pages/technicians/chat/chat.js":"36","/home/alijm/FinalProject/frontend/src/components/pages/customers/appointments/schedule.js":"37"},{"size":490,"mtime":1610761297280,"results":"38","hashOfConfig":"39"},{"size":5001,"mtime":1614118959394,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1607688082240,"results":"41","hashOfConfig":"39"},{"size":473,"mtime":1607910318571,"results":"42","hashOfConfig":"39"},{"size":5077,"mtime":1614117397864,"results":"43","hashOfConfig":"39"},{"size":467,"mtime":1608306450920,"results":"44","hashOfConfig":"39"},{"size":473,"mtime":1608047068410,"results":"45","hashOfConfig":"39"},{"size":5301,"mtime":1610924272090,"results":"46","hashOfConfig":"39"},{"size":856,"mtime":1609859140090,"results":"47","hashOfConfig":"39"},{"size":6083,"mtime":1610924201480,"results":"48","hashOfConfig":"39"},{"size":1985,"mtime":1608334403976,"results":"49","hashOfConfig":"39"},{"size":9655,"mtime":1610907875730,"results":"50","hashOfConfig":"39"},{"size":9841,"mtime":1610994231490,"results":"51","hashOfConfig":"39"},{"size":16089,"mtime":1611789359860,"results":"52","hashOfConfig":"39"},{"size":2344,"mtime":1610808895120,"results":"53","hashOfConfig":"39"},{"size":2423,"mtime":1614117968494,"results":"54","hashOfConfig":"39"},{"size":2407,"mtime":1610563834013,"results":"55","hashOfConfig":"39"},{"size":4488,"mtime":1611800709310,"results":"56","hashOfConfig":"39"},{"size":3647,"mtime":1611800719650,"results":"57","hashOfConfig":"39"},{"size":3807,"mtime":1611800783110,"results":"58","hashOfConfig":"39"},{"size":3507,"mtime":1610991836820,"results":"59","hashOfConfig":"39"},{"size":2989,"mtime":1610563902703,"results":"60","hashOfConfig":"39"},{"size":3524,"mtime":1610731698498,"results":"61","hashOfConfig":"39"},{"size":6970,"mtime":1610924237630,"results":"62","hashOfConfig":"39"},{"size":2013,"mtime":1609375930836,"results":"63","hashOfConfig":"39"},{"size":3416,"mtime":1611758598440,"results":"64","hashOfConfig":"39"},{"size":422,"mtime":1610663078420,"results":"65","hashOfConfig":"39"},{"size":5898,"mtime":1614117907454,"results":"66","hashOfConfig":"39"},{"size":10678,"mtime":1614117915194,"results":"67","hashOfConfig":"39"},{"size":9882,"mtime":1610906788040,"results":"68","hashOfConfig":"39"},{"size":3657,"mtime":1610904783060,"results":"69","hashOfConfig":"39"},{"size":3824,"mtime":1610917107530,"results":"70","hashOfConfig":"39"},{"size":3540,"mtime":1610916879190,"results":"71","hashOfConfig":"39"},{"size":10173,"mtime":1611806432210,"results":"72","hashOfConfig":"39"},{"size":8524,"mtime":1611801045820,"results":"73","hashOfConfig":"39"},{"size":7757,"mtime":1611800867130,"results":"74","hashOfConfig":"39"},{"size":16081,"mtime":1611789050666,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"bra87i",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"78"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"78"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"78"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"78"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"78"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"78"},"/home/alijm/FinalProject/frontend/src/index.js",[],["175","176"],"/home/alijm/FinalProject/frontend/src/App.js",[],"/home/alijm/FinalProject/frontend/src/reportWebVitals.js",[],"/home/alijm/FinalProject/frontend/src/components/containers/AppContainer.js",[],"/home/alijm/FinalProject/frontend/src/api.js",[],"/home/alijm/FinalProject/frontend/src/theme.js",[],"/home/alijm/FinalProject/frontend/src/components/containers/FormContainer.js",[],["177","178"],"/home/alijm/FinalProject/frontend/src/components/pages/logIn.js",[],"/home/alijm/FinalProject/frontend/src/components/pages/logOut.js",[],"/home/alijm/FinalProject/frontend/src/components/pages/customers/register/register.js",["179","180"],"import React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport api from '../../../../api';\nimport AsynchronousSearchCities from './citySelect';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"/\">\n        TradieFind\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(10),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function CustomerRegister() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [cityId, setCityId] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleChange = (event,value) => {\n    let newCityId =  value.id;\n    setCityId(newCityId);\n    console.log('child City Id: ', newCityId);\n  }\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    try {\n     await api.customerRegister({\n         firstName, lastName, cityId, email, password, confirmPassword\n     });\n     history.push('/')\n    }\n    catch {\n     alert('Failed to Register');\n    } \n    finally {\n     setSubmitting(false);\n    }\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000)\n    };\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Register\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={e => setFirstName(e.target.value)}\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                value={lastName}\n                onChange={e => setLastName(e.target.value)}\n                autoComplete=\"lname\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                autoComplete=\"email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                name=\"password\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                name=\"confirmPassword\"\n                value={confirmPassword}\n                onChange={e => setConfirmPassword(e.target.value)}\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirmPassword\"\n                autoComplete=\"current-confirm-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <AsynchronousSearchCities handleChange={handleChange} ></AsynchronousSearchCities>\n            </Grid>\n            {/* <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n              />\n            </Grid> */}\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"inherit\"\n            className={classes.submit}\n            onClick={handleSubmit}\n            disabled={submitting}>\n            {submitting? 'Registering...' : 'Register'}\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"http://localhost:3000/login\" variant=\"body2\">\n                Already have an account? Log in !\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/customers/register/citySelect.js",[],"/home/alijm/FinalProject/frontend/src/components/pages/customers/search/allTechnicians.js",["181","182"],"import React, {useEffect,useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport api from '../../../../api';\nimport Link from '@material-ui/core/Link';\nimport Rating from '@material-ui/lab/Rating';\nimport Box from '@material-ui/core/Box';\n\n\n\nfunction createData(name, speciality, rating, city, id) {\n  return { name, speciality, rating, city, id };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: \"Name\" },\n  { id: 'speciality', numeric: false, disablePadding: false, label: 'Speciality' },\n  { id: 'rating', numeric: true, disablePadding: false, label: 'Rating' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'Appointment', numeric: false, disablePadding: false, label: 'Appointment' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  \n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'center' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    marginLeft: theme.spacing(3.5),\n\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n\n  return (\n    \n    <Toolbar\n      className={clsx(classes.root)}\n    >\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Tradesmen\n        </Typography>\n      \n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      \n    </Toolbar>\n  );\n};\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginTop:theme.spacing(10),\n    marginBottom: theme.spacing(2),\n    opacity:'0.75',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function ApprovalAppointments() {\n  const classes = useStyles();\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('rating');\n  const [page, setPage] = useState(0);\n  const [dense, setDense] = useState(true);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [rows, setRows] = useState([]);\n\n  const holderData = [];\n\n  const getAllTechniciansData= async () => {\n    await api.getAllTechnicians().then(res => {\n    const techData = res.data.technicians;\n    techData.forEach(obj=>{\n    holderData.push(createData(obj.first_name + ' '+ obj.last_name, obj.category.name, obj.ratings, obj.city.city, obj.id))\n    })\n    })\n    setRows(holderData);\n    console.log('rows: ', rows)\n}\n  useEffect(() => {\n    if(!rows.length) {\n      getAllTechniciansData();\n    }\n  }, [])\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  let history = useHistory();\n\n  const preventDefault = () => {\n    history.push('/tradesman/schedule')\n  }\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      tabIndex={-1}\n                      key={row.name}\n                     \n                    >\n                      <TableCell padding=\"checkbox\">\n                        \n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"left\">{row.speciality}</TableCell>\n                      <TableCell align=\"center\">\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                          <Rating name=\"read-only\" value={row.rating} readOnly />\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"left\">{row.city}</TableCell>\n                      <TableCell align=\"left\"><Link component=\"button\" variant=\"body2\" onClick={() => { \n                        history.push('/' + row.id + '/requestappointment');}}\n                        >\n                          Request\n                        </Link>\n                      \n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/results.js",["183","184","185"],"import React, {useEffect,useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport api from '../../../../api';\nimport Link from '@material-ui/core/Link';\nimport Rating from '@material-ui/lab/Rating';\nimport Box from '@material-ui/core/Box';\n\n\n\nfunction createData(name, speciality, rating, city, id) {\n  return { name, speciality, rating, city, id };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: \"Name\" },\n  { id: 'speciality', numeric: false, disablePadding: false, label: 'Speciality' },\n  { id: 'rating', numeric: true, disablePadding: false, label: 'Rating' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'Appointment', numeric: false, disablePadding: false, label: 'Appointment' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  \n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'center' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    marginLeft: theme.spacing(3.5),\n\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n\n  return (\n    \n    <Toolbar\n      className={clsx(classes.root)}\n    >\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Tradesmen\n        </Typography>\n      \n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      \n    </Toolbar>\n  );\n};\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginTop:theme.spacing(10),\n    marginBottom: theme.spacing(2),\n    opacity:'0.75',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function ApprovalAppointments() {\n  const classes = useStyles();\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('rating');\n  const [page, setPage] = useState(0);\n  const [dense, setDense] = useState(true);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [rows, setRows] = useState([]);\n\n  const holderData = [];\n\n  const getAllTechniciansData= async () => {\n    await api.getAllTechnicians().then(res => {\n    const techData = res.data.technicians;\n    /* techData.forEach(obj=>{\n    holderData.push(createData(obj.first_name + ' '+ obj.last_name, obj.category.name, obj.ratings, obj.city.city, obj.id))\n    }) */\n    holderData.push(createData('Omar Kabbara', 'Plumber', 4, 'Tripoli', 1))\n    holderData.push(createData('Loay Farhat', 'Plumber', 3, 'Tyre', 10))\n    })\n    \n    setRows(holderData);\n    console.log('rows: ', rows)\n}\n  useEffect(() => {\n    holderData.length = 0\n    if(!rows.length) {\n      getAllTechniciansData();\n    }\n  }, [])\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  let history = useHistory();\n\n  const preventDefault = () => {\n    history.push('/tradesman/schedule')\n  }\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      tabIndex={-1}\n                      key={row.name}\n                     \n                    >\n                      <TableCell padding=\"checkbox\">\n                        \n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"left\">{row.speciality}</TableCell>\n                      <TableCell align=\"center\">\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                          <Rating name=\"read-only\" value={row.rating} readOnly />\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"left\">{row.city}</TableCell>\n                      <TableCell align=\"left\"><Link component=\"button\" variant=\"body2\" onClick={() => { \n                        history.push('/' + row.id + '/requestappointment');}}\n                        >\n                          Request\n                        </Link>\n                      \n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/technicians/appointments/schedule.js",["186"],"import React,{useEffect, useState, useCallback} from 'react';\nimport api from '../../../../api';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport LocationOn from '@material-ui/icons/LocationOn';\nimport Close from '@material-ui/icons/Close';\nimport CalendarToday from '@material-ui/icons/CalendarToday';\nimport Create from '@material-ui/icons/Create';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles , makeStyles} from '@material-ui/core/styles';\nimport {\n  ViewState,\n  EditingState,\n} from '@devexpress/dx-react-scheduler';\nimport { connectProps } from '@devexpress/dx-react-core';\nimport { KeyboardDateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport {\n  Scheduler,\n  MonthView,\n  WeekView,\n  DayView,\n  Appointments,\n  Toolbar,\n  DateNavigator,\n  ViewSwitcher,\n  AppointmentForm,\n  AppointmentTooltip,\n  TodayButton,\n} from '@devexpress/dx-react-scheduler-material-ui';\n\nconst getAppointments= async (setData, setLoading) => {\n    setLoading(true);\n    const techId =localStorage.getItem('UsersId');\n    try {\n      await api.getTechnicianAppointments({\n           techId\n      }).then(res=> {\n            const data = res.data;\n            setTimeout (() =>{\n                setData(data.appointments)\n                setLoading(false);\n            }, 600)\n      });\n     }\n     catch {\n      alert('Failed to get appointments');\n     }\n  }\nconst styles =  makeStyles((theme) => ({ \n   paper: {\n    marginTop: theme.spacing(10),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    opacity: '0.8',\n  },\n  toolbarRoot: {\n    position: 'relative',\n  },\n  progress: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n    left: 0,\n  },\n}));\n\nconst containerStyles = theme => ({\n  container: {\n    width: theme.spacing(68),\n    padding: 0,\n    paddingBottom: theme.spacing(2),\n  },\n  content: {\n    padding: theme.spacing(2),\n    paddingTop: 0,\n  },\n  header: {\n    overflow: 'hidden',\n    paddingTop: theme.spacing(0.5),\n  },\n  closeButton: {\n    float: 'right',\n  },\n  buttonGroup: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 2),\n  },\n  button: {\n    marginLeft: theme.spacing(2),\n  },\n  picker: {\n    marginRight: theme.spacing(2),\n    '&:last-child': {\n      marginRight: 0,\n    },\n    width: '50%',\n  },\n  wrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1, 0),\n  },\n  icon: {\n    margin: theme.spacing(2, 0),\n    marginRight: theme.spacing(2),\n  },\n  textField: {\n    width: '100%',\n  },\n});\n\nconst ToolbarWithLoading = withStyles(styles, { name: 'Toolbar' })(\n  ({ children, classes, ...restProps }) => (\n    <div className={classes.toolbarRoot}>\n      <Toolbar.Root {...restProps}>\n        {children}\n      </Toolbar.Root>\n      <LinearProgress className={classes.progress} />\n    </div>\n  ),\n);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd ;\n\n\nconst mapAppointmentData = appointment => ({\n  id: appointment.id,\n  startDate: new Date(appointment.startDate.split(/[- :]/)[0], appointment.startDate.split(/[- :]/)[1]-1, \n  appointment.startDate.split(/[- :]/)[2], appointment.startDate.split(/[- :]/)[3], appointment.startDate.split(/[- :]/)[4], \n  appointment.startDate.split(/[- :]/)[5]),\n  endDate: new Date(appointment.endDate.split(/[- :]/)[0], appointment.endDate.split(/[- :]/)[1]-1, \n  appointment.endDate.split(/[- :]/)[2], appointment.endDate.split(/[- :]/)[3], appointment.endDate.split(/[- :]/)[4], \n  appointment.endDate.split(/[- :]/)[5]),\n  title: appointment.title,\n  location: appointment.location,\n});\n\nconst initialState = {\n  data: [],\n  loading: false,\n  currentDate: today,\n  currentViewName: 'Week',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setLoading':\n      return { ...state, loading: action.payload };\n    case 'setData':\n      return { ...state, data: action.payload.map(mapAppointmentData) };\n    case 'setCurrentViewName':\n      return { ...state, currentViewName: action.payload };\n    case 'setCurrentDate':\n      return { ...state, currentDate: action.payload };\n    default:\n      return state;\n  }\n};\nclass AppointmentFormContainerBasic extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      appointmentChanges: {},\n    };\n\n    this.getAppointmentData = () => {\n      const { appointmentData } = this.props;\n      return appointmentData;\n    };\n    this.getAppointmentChanges = () => {\n      const { appointmentChanges } = this.state;\n      return appointmentChanges;\n    };\n\n    this.changeAppointment = this.changeAppointment.bind(this);\n    this.commitAppointment = this.commitAppointment.bind(this);\n  }\n\n  changeAppointment({ field, changes }) {\n    const nextChanges = {\n      ...this.getAppointmentChanges(),\n      [field]: changes,\n    };\n    this.setState({\n      appointmentChanges: nextChanges,\n    });\n  }\n\n  commitAppointment(type) {\n    const { commitChanges } = this.props;\n    const appointment = {\n      ...this.getAppointmentData(),\n      ...this.getAppointmentChanges(),\n    };\n    if (type === 'deleted') {\n      commitChanges({ [type]: appointment.id });\n    } else if (type === 'changed') {\n      commitChanges({ [type]: { [appointment.id]: appointment } });\n    } else {\n      commitChanges({ [type]: appointment });\n    }\n    this.setState({\n      appointmentChanges: {},\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      visible,\n      visibleChange,\n      appointmentData,\n      target,\n      onHide,\n    } = this.props;\n    const { appointmentChanges } = this.state;\n\n    const displayAppointmentData = {\n      ...appointmentData,\n      ...appointmentChanges,\n    };\n\n    const applyChanges = () => this.commitAppointment('changed');\n\n    const textEditorProps = field => ({\n      variant: 'outlined',\n      onChange: ({ target: change }) => this.changeAppointment({\n        field: [field], changes: change.value,\n      }),\n      value: displayAppointmentData[field] || '',\n      label: field[0].toUpperCase() + field.slice(1),\n      className: classes.textField,\n    });\n\n    const pickerEditorProps = field => ({\n      className: classes.picker,\n      // keyboard: true,\n      ampm: false,\n      value: displayAppointmentData[field],\n      onChange: date => this.changeAppointment({\n        field: [field], changes: date ? date.toDate() : new Date(displayAppointmentData[field]),\n      }),\n      inputVariant: 'outlined',\n      format: 'DD/MM/YYYY HH:mm',\n      onError: () => null,\n    });\n\n    const cancelChanges = () => {\n      this.setState({\n        appointmentChanges: {},\n      });\n      visibleChange();\n    };\n\n    return (\n      <AppointmentForm.Overlay\n        visible={visible}\n        target={target}\n        fullSize\n        onHide={onHide}\n      >\n        <div>\n          <div className={classes.header}>\n            <IconButton\n              className={classes.closeButton}\n              onClick={cancelChanges}\n            >\n              <Close color=\"action\" />\n            </IconButton>\n          </div>\n          <div className={classes.content}>\n            <div className={classes.wrapper}>\n              <Create className={classes.icon} color=\"action\" />\n              <TextField\n                {...textEditorProps('title')}\n              />\n            </div>\n            <div className={classes.wrapper}>\n              <CalendarToday className={classes.icon} color=\"action\" />\n              <MuiPickersUtilsProvider utils={MomentUtils}>\n                <KeyboardDateTimePicker\n                  label=\"Start Date\"\n                  {...pickerEditorProps('startDate')}\n                />\n                <KeyboardDateTimePicker\n                  label=\"End Date\"\n                  {...pickerEditorProps('endDate')}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div className={classes.wrapper}>\n              <LocationOn className={classes.icon} color=\"action\" />\n              <TextField\n                {...textEditorProps('location')}\n              />\n            </div>\n          </div>\n          <div className={classes.buttonGroup}>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                onClick={() => {\n                  visibleChange();\n                  this.commitAppointment('deleted');\n                }}\n              >\n                Delete\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.button}\n                onClick={() => {\n                visibleChange();\n                applyChanges();\n                }}\n            >\n             Save\n            </Button>\n          </div>\n        </div>\n      </AppointmentForm.Overlay>\n    );\n  }\n}\nconst AppointmentFormContainer = withStyles(containerStyles, { name: 'AppointmentFormContainer' })(AppointmentFormContainerBasic);\n\nexport default function TechnicianSchedule() {\n  const classes = styles();\n  const [confirmationVisible, setConfirimationVisible] = useState(false);\n  const [editingFormVisible, setEditingFormVisible] = useState(false);\n  const [deletedAppointmentId, setDeletedAppointmentId] = useState(undefined);\n  const [editingAppointment, setEditingAppointment] = useState(undefined);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const {\n    data, loading, currentViewName, currentDate,\n  } = state;\n\n  const setCurrentViewName = useCallback(nextViewName => dispatch({\n    type: 'setCurrentViewName', payload: nextViewName,\n  }), [dispatch]);\n  const setData = useCallback(nextData => dispatch({\n    type: 'setData', payload: nextData,\n  }), [dispatch]);\n  const setCurrentDate = useCallback(nextDate => dispatch({\n    type: 'setCurrentDate', payload: nextDate,\n  }), [dispatch]);\n  const setLoading = useCallback(nextLoading => dispatch({\n    type: 'setLoading', payload: nextLoading,\n  }), [dispatch]);\n\n  const commitChanges = ({ changed, deleted }) => {\n    if (changed) { //send request to edit here \n      const updatedData = data.map(appointment => (\n        changed[appointment.id] ? { ...appointment, ...changed[appointment.id] } : appointment));\n     \n      var results = updatedData.filter(appointment1 => \n        !data.some(appointment2 => (appointment2.id === appointment1.id \n          && appointment2.title === appointment1.title \n          && appointment2.startDate === appointment1.startDate\n          && appointment2.endDate === appointment1.endDate\n          && appointment2.location === appointment1.location)))\n          \n          console.log('results: ',results)\n      if(results.length === 1) {\n        const changedAppointment = results[0];\n        const MOMENT= require( 'moment' );\n        const newStartDate = MOMENT(changedAppointment.startDate).format( 'YYYY-MM-DD  HH:mm:ss.000' );\n        const newEndDate = MOMENT(changedAppointment.endDate).format( 'YYYY-MM-DD  HH:mm:ss.000' );\n        const id = changedAppointment.id;\n        const newLocation = changedAppointment.location;\n        const newTitle = changedAppointment.title;\n     \n        console.log('new StartDate: ', newStartDate);\n        console.log('new EndDate: ', newEndDate);\n        console.log('results: ', results);\n        console.log('results title: ', results[0].title);\n          \n        (async () => {\n          try {\n            await api.technicianEditAppointment({id, newTitle, newStartDate, newEndDate, newLocation });\n          \n          }\n          catch {\n            alert('Failed to update appointment');\n          } \n        })();\n\n        getAppointments(setData, setLoading);\n      }\n    };\n    if (deleted !== undefined) {\n      setDeletedAppointmentId(deleted);\n      toggleConfirmationVisible();\n    }\n  \n  }\n  const toggleEditingFormVisibility = () => {\n    setEditingFormVisible(!editingFormVisible);\n  }\n\n  const toggleConfirmationVisible = () => {\n    setConfirimationVisible(!confirmationVisible);\n  }\n  const onEditingAppointmentChange = (editingAppointment) => {\n    setEditingAppointment(editingAppointment);\n  }\n\n  const appointmentForm = connectProps(AppointmentFormContainer, () => {\n\n    const currentAppointment = data\n      .filter(appointment => editingAppointment && appointment.id === editingAppointment.id)[0];\n\n    return {\n      visible: editingFormVisible,\n      appointmentData: currentAppointment,\n      commitChanges: commitChanges,\n      visibleChange: toggleEditingFormVisibility,\n      onEditingAppointmentChange: onEditingAppointmentChange ,\n    };\n  });\n  \n\n  const commitDeletedAppointment = async () => {\n    \n      const appointmentToDelete = data.filter(appointment => appointment.id === deletedAppointmentId);\n      const appointmentToDeleteId = appointmentToDelete[0].id;\n      console.log('appointment To Delete:', appointmentToDeleteId)\n      toggleConfirmationVisible();\n      try {\n        await api.technicianDeleteAppointment(\n             appointmentToDeleteId\n        )\n        \n           \n       }\n       catch {\n        alert('Failed to delete appointment.');\n       }\n      \n\n      /* return { data: nextData, deletedAppointmentId: null }; */\n    \n    \n    console.log('confirmationVisible: ',confirmationVisible);\n    getAppointments(setData, setLoading);\n  }\n\n  \n  useEffect(() => {\n    getAppointments(setData, setLoading);\n    appointmentForm.update();\n  }, [setData, currentViewName, currentDate]);\n\n  return (\n    <Paper className={classes.paper}>\n      <Scheduler\n        data={data}\n        height={660}\n      >\n        <ViewState\n          currentDate={currentDate}\n          currentViewName={currentViewName}\n          onCurrentViewNameChange={setCurrentViewName}\n          onCurrentDateChange={setCurrentDate}\n        />\n        <EditingState\n            onCommitChanges={commitChanges}\n            onEditingAppointmentChange={onEditingAppointmentChange}\n        />\n        <DayView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <WeekView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <MonthView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <Appointments />\n        <Toolbar\n          {...loading ? { rootComponent: ToolbarWithLoading } : null}\n        />\n        <DateNavigator />\n        <TodayButton />\n        <ViewSwitcher />\n        <AppointmentTooltip\n          showOpenButton\n          showCloseButton\n        />\n        <AppointmentForm\n          overlayComponent={appointmentForm}\n          visible={editingFormVisible}\n          onVisibilityChange={toggleEditingFormVisibility}\n        />\n        \n        <AppointmentForm  />\n      </Scheduler>\n\n      <Dialog\n          open={confirmationVisible}\n        >\n          <DialogTitle>\n            Delete Appointment\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Are you sure you want to delete this appointment?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={toggleConfirmationVisible} color=\"primary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button onClick={commitDeletedAppointment} color=\"secondary\" variant=\"outlined\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Paper>\n  );\n};\n","/home/alijm/FinalProject/frontend/src/components/pages/home/guestHome.js",["187","188"],"import React, {useState} from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Container from '@material-ui/core/Container/Container';\nimport { makeStyles,Button} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    homeContainer: {\n      marginTop: theme.spacing(10),\n      marginLeft: theme.spacing(-5),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    homeMainText: {\n      marginTop: theme.spacing(10),\n      marginRight: theme.spacing(-31),\n      backgroundColor:'clear' ,\n      fontSize:'23px',\n      fontWeight: 'bolder',\n\n    },\n    homeSideText: {\n        marginTop: theme.spacing(2),\n        marginRight: theme.spacing(-34),\n        backgroundColor:'clear' ,\n        fontSize:'16px',\n    },\n    buttons: {\n        marginTop: theme.spacing(2),\n        marginRight: theme.spacing(-30),\n      },\n    registerButton: {\n        fontFamily: \"Open Sans, sans-serif\",\n        fontWeight: 700,\n        size: \"18px\",\n        marginLeft: \"20px\",\n        backgroundColor:'#E0E0E0',\n        textTransform:'none',\n      },\n    allTechniciansButton: {\n        fontFamily: \"Open Sans, sans-serif\",\n        fontWeight: 700,\n        size: \"18px\",\n        marginLeft: \"20px\",\n        backgroundColor:'#E0E0E0',\n        textTransform:'none',\n      },\n  }));\n  \nexport default function GuestHome() {\n    const classes = useStyles();\n    let history = useHistory();\n\n\n    const redirectToRegister = () => {\n        history.push(\"/customer/register\")\n    }\n    \n    const redirectToAllTechnicians = () => {\n        history.push(\"/guest/alltradesmen\")\n    }\n   \nreturn (\n    <Container className={classes.homeContainer}>\n        <p className={classes.homeMainText}>Get a tradesman to your doorstep !</p>\n        <p className={classes.homeSideText}>TradieFind helps you find the right expert for the job <b>hassle-free</b>.</p>\n        <div className={classes.buttons}>\n        <Button \n        className={classes.registerButton}\n        onClick={redirectToRegister}\n        >\n            Join TradieFind Now!\n        </Button>\n        <Button \n        className={classes.allTechniciansButton}\n        onClick={redirectToAllTechnicians}\n        >\n            See all the tradesmen available.\n        </Button>\n\n        </div>\n       \n    </Container>\n)\n    \n};","/home/alijm/FinalProject/frontend/src/components/pages/home/customerHome.js",["189"],"/home/alijm/FinalProject/frontend/src/components/pages/home/technicianHome.js",["190","191"],"import React, {useState} from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Container from '@material-ui/core/Container/Container';\nimport { makeStyles,Button} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    homeContainer: {\n      marginTop: theme.spacing(10),\n      marginLeft: theme.spacing(-5),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n    homeMainText: {\n      marginTop: theme.spacing(7),\n      marginRight: theme.spacing(-36),\n      backgroundColor:'clear' ,\n      fontSize:'23px',\n      fontWeight: 'bolder',\n\n    },\n    homeSideText: {\n        marginTop: theme.spacing(2),\n        marginRight: theme.spacing(-35.4),\n        backgroundColor:'clear' ,\n        fontSize:'16px',\n    },\n    buttons: {\n        marginTop: theme.spacing(4),\n        marginRight: theme.spacing(-31.4),\n      },\n    registerButton: {\n        fontFamily: \"Open Sans, sans-serif\",\n        fontWeight: 700,\n        size: \"18px\",\n        marginLeft: \"20px\",\n        backgroundColor:'#E0E0E0',\n        textTransform:'none',\n      },\n    allTechniciansButton: {\n        fontFamily: \"Open Sans, sans-serif\",\n        fontWeight: 700,\n        size: \"18px\",\n        marginLeft: \"20px\",\n        backgroundColor:'#E0E0E0',\n        textTransform:'none',\n      },\n  }));\n  \nexport default function TechnicianHome() {\n    const classes = useStyles();\n    let history = useHistory();\n\n    const UsersName = localStorage.getItem('UsersName')\n    \n    const redirectToProfile = () => {\n        history.push(\"/tradesman/profile\")\n    }\n    \n    const redirectToTechnicianSchedule = () => {\n        history.push(\"/tradesman/myschedule\")\n    }\n   \nreturn (\n    <Container className={classes.homeContainer}>\n        <p className={classes.homeMainText}>Welcome {UsersName}, Your next job awaits !</p>\n        <p className={classes.homeSideText}>TradieFind helps you find jobs <b>quicker</b> and <b>easier</b>.</p>\n        <div className={classes.buttons}>\n        <Button \n        className={classes.registerButton}\n        onClick={redirectToProfile}\n        >\n            Go To Your Profile !\n        </Button>\n        <Button \n        className={classes.allTechniciansButton}\n        onClick={redirectToTechnicianSchedule}\n        >\n            Check Your Schedule.\n        </Button>\n\n        </div>\n       \n    </Container>\n)\n    \n};","/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/customerHeader.js",["192","193","194","195","196"],"import React, {useState} from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport { \n  AppBar, \n  Toolbar, \n  Typography, \n  makeStyles,\n  Button,\n  fade,\n  TextField\n } from '@material-ui/core';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChatIcon from '@material-ui/icons/Chat';\nimport HelpIcon from '@material-ui/icons/Help';\nimport CustomerDropDownMenu from './customerDropDownMenu';\nimport NotificationsDropDownMenu from './notifications';\n\n\nconst useStyles = makeStyles(() => ({\n  header: {\n     background: \"none\",\n     paddingRight: \"79px\",\n     paddingLeft: \"118px\",\n  },\n\n  logo: {\n    fontFamily: \"Work Sans, sans-serif\",\n    fontWeight: 600,\n    color: \"black\",\n    textAlign: \"left\",\n  },\n\n  searchContainer: {\n    display: \"flex\",\n    backgroundColor: fade('#00000', 0.15),\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    marginTop: \"-15px\",\n    marginBottom: \"5px\",\n  },\n\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n    color:'#000000'\n  },\n\n  searchInput: {\n    width: \"250px\",\n    margin: \"5px\",\n  },\n\n  menuButton: {\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n  },\n\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n  rightSideButtons: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n  badge: {\n    position:'absolute',\n    top:'-10px',\n    right: '-10px',\n  padding: '5px 10px',\n  borderRadius: '50%',\n  background: 'black',\n  color: '#000001',\n  }\n\n}));\n\nconst customerHeaderData = [\n  {\n    label: \"All Tradesmen\",\n    href: \"/alltradesmen\",\n  },\n  /* {\n    label: <HelpIcon ></HelpIcon>,\n    href: \"/help\",\n  }, */\n  {\n    label: <ChatIcon ></ChatIcon>,\n    href: \"/customer/messages\",\n  },\n\n];\n\nexport default function CustomerHeader() {\n  const { header, logo, menuButton, toolbar } = useStyles();\n  const classes = useStyles();\n  const [filter, setFilter] = useState(\"\");\n  const [anchorEl, setAnchorEl] = useState(null);\n  let history = useHistory();\n\n  const handleSearchChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const handleSearchKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.key === 'Enter') {\n      history.push(\"/search\");\n    }\n  };\n\n  \n  const displayDesktop = () => {\n    return (\n      <Toolbar className={toolbar}>\n      <Button\n         {...{\n           key: \"logoHome\",\n           color:\"black\",\n           to: \"/\",\n           component: RouterLink,\n           className: logo\n         }} \n       >\n       {TradieFindLogo}\n       {/* <img src=\"TFlogo.png\" alt=\"logo\"  /> */}\n       </Button>\n      \n       <div className={classes.searchContainer}>\n            <SearchIcon className={classes.searchIcon} />\n            <TextField\n              className={classes.searchInput}\n              onKeyPress={handleSearchKeypress}\n              onChange={handleSearchChange}\n              label=\"search for tradesmen here!\"\n              variant=\"standard\"\n            />\n          </div>\n      <div className={classes.rightSideButtons}>   \n        <div>{getMenuButtons()}</div>\n        <NotificationsDropDownMenu />\n        <CustomerDropDownMenu></CustomerDropDownMenu>\n      </div>  \n      </Toolbar>\n    );\n  };\n  \n  const TradieFindLogo = (\n    <Typography variant=\"h6\" component=\"h1\" className={logo}>\n      TradieFind\n    </Typography> \n    );\n\n  const getMenuButtons = () => {\n    return customerHeaderData.map(({label, href}) => {\n      return (\n        <Button\n          {...{\n            key: label,\n            color:\"black\",\n            to: href,\n            component: RouterLink,\n            className: menuButton\n          }} \n        >\n        {label}\n        </Button>\n      );\n    });\n  };\n\n  return (\n    <header>\n      <AppBar className={header} elevation={0}>\n        {displayDesktop()}\n      </AppBar>\n    </header>\n  );\n}\n\n        {/* <div>\n          <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n            <AccountCircleIcon></AccountCircleIcon>\n          </Button>\n          <Menu\n            id=\"simple-menu\"\n            anchorEl={anchorEl}\n            keepMounted\n            open={Boolean(anchorEl)}\n            onClose={handleClose}\n          >\n            <MenuItem onClick={handleProfile}>My Profile</MenuItem>\n            <MenuItem onClick={handleAppointments}>My Appointments</MenuItem>\n            <MenuItem onClick={handleLogout}>Logout</MenuItem>\n          </Menu>\n        </div>  */}","/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/guestHeader.js",["197","198"],"import React, {useState} from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport { \n  AppBar, \n  Toolbar, \n  Typography, \n  makeStyles,\n  Button,\n  fade,\n  TextField,\n } from '@material-ui/core';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport HelpIcon from '@material-ui/icons/Help';\nimport GuestDropDownMenu from './guestDropDownMenu';\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n     \n     background: 'none',\n     paddingRight: \"79px\",\n     paddingLeft: \"118px\",\n  },\n\n  logo: {\n    fontFamily: \"Work Sans, sans-serif\",\n    fontWeight: 600,\n    color: \"black\",\n    textAlign: \"left\",\n  },\n\n  searchContainer: {\n    display: \"flex\",\n    backgroundColor: fade('#00000', 0.15),\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    marginTop: \"-15px\",\n    marginBottom: \"5px\",\n  },\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n    color:'#000000'\n  },\n  searchInput: {\n    width: \"250px\",\n    margin: \"5px\",\n  },\n\n /*  logo: {\n    maxWidth: 200,\n  }, */\n\n  menuButton: {\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n    marginLeft: \"20px\",\n  },\n\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n  rightSideButtons: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n}));\n\nconst guestHeaderData = [\n  \n  {\n    label: \"All Tradesmen\",\n    href: \"/guest/alltradesmen\",\n  },\n  /* {\n    label: <HelpIcon ></HelpIcon>,\n    href: \"/help\",\n  }, */\n  {\n    label: \"Log In\",\n    href: \"/login\",\n  },\n];\n\nexport default function GuestHeader() {\n  const { header, logo, menuButton, toolbar } = useStyles();\n  const classes = useStyles();\n  const [filter, setFilter] = useState(\"\");\n\n  let history = useHistory();\n\n  const handleSearchChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const handleSearchKeypress = (e) => {\n    //it triggers by pressing the enter key\n\n    if (e.key === 'Enter') {\n      history.push(\"/search\");\n    }\n  };\n\n\n  const displayDesktop = () => {\n    return (\n       <Toolbar className={toolbar}>\n       <Button\n          {...{\n            key: \"logoHome\",\n            color:\"black\",\n            to: \"/\",\n            component: RouterLink,\n            className: logo\n          }} \n        >\n        {TradieFindLogo}\n        {/* <img src=\"TFlogo.png\" alt=\"logo\"  /> */}\n        </Button>\n       \n        <div className={classes.searchContainer}>\n            <SearchIcon className={classes.searchIcon} />\n            <TextField\n              className={classes.searchInput}\n              onKeyPress={handleSearchKeypress}\n              onChange={handleSearchChange}\n              label=\"search for tradesmen here!\"\n              variant=\"standard\"\n            />\n          </div>\n       <div className={classes.rightSideButtons}>\n        <div>{getMenuButtons()}</div>\n        <div className={classes.menuButton}>\n          <GuestDropDownMenu></GuestDropDownMenu>\n        </div>\n      </div>\n       </Toolbar>\n    );\n  };\n  \n  const TradieFindLogo = (\n    <Typography variant=\"h6\" component=\"h1\" className={logo}>\n      TradieFind\n    </Typography> \n    );\n\n  const getMenuButtons = () => {\n    return guestHeaderData.map(({label, href}) => {\n      return (\n        <Button\n          {...{\n            key: label,\n            color:\"black\",\n            to: href,\n            component: RouterLink,\n            className: menuButton\n          }} \n        >\n        {label}\n        </Button>\n      );\n    });\n    \n  };\n  \n        \n  \n\n  return (\n    <header>\n      <AppBar className={header} elevation={0}>\n        {displayDesktop()}\n      </AppBar>\n    </header>\n  );\n}\n\n","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/technicianHeader.js",["199","200","201","202","203"],"import React, {useState} from \"react\";\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport api from '../../../api';\nimport { \n  AppBar, \n  Toolbar, \n  Typography, \n  makeStyles,\n  Button,\n  fade,\n  TextField,\n } from '@material-ui/core';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ChatIcon from '@material-ui/icons/Chat';\nimport HelpIcon from '@material-ui/icons/Help';\nimport TechnicianDropDownMenu from './technicianDropDownMenu';\nimport NotificationsDropDownMenu from './notifications';\n\n\nconst useStyles = makeStyles(() => ({\n  header: {\n     background: \"none\",\n     paddingRight: \"79px\",\n     paddingLeft: \"118px\",\n  },\n\n  logo: {\n    fontFamily: \"Work Sans, sans-serif\",\n    fontWeight: 600,\n    color: \"black\",\n    textAlign: \"left\",\n  },\n\n  searchContainer: {\n    display: \"flex\",\n    backgroundColor: fade('#00000', 0.15),\n    paddingLeft: \"20px\",\n    paddingRight: \"20px\",\n    marginTop: \"-15px\",\n    marginBottom: \"5px\",\n  },\n\n  searchIcon: {\n    alignSelf: \"flex-end\",\n    marginBottom: \"5px\",\n    color:'#000000'\n  },\n\n  searchInput: {\n    width: \"250px\",\n    margin: \"5px\",\n  },\n\n  menuButton: {\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n  },\n\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n\n  rightSideButtons: {\n    display: \"flex\",\n    justifyContent: \"space-around\",\n  },\n\n}));\n\nconst technicianHeaderData = [\n  /* {\n    label: \"All Tradesmen\",\n    href: \"/alltradesmen\",\n  }, */\n  /* {\n    label: <HelpIcon ></HelpIcon>,\n    href: \"/help\",\n  }, */\n  {\n    label: <ChatIcon ></ChatIcon>,\n    href: \"/tradesman/messages\",\n  },\n];\n\nexport default function TechnicianHeader() {\n  const { header, logo, menuButton, toolbar } = useStyles();\n  const classes = useStyles();\n  const [filter, setFilter] = useState(\"\");\n  let history = useHistory();\n\n  const handleSearchChange = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const handleSearchKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.key === 'Enter') {\n      history.push(\"/search\");\n    }\n  };\n\n  const displayDesktop = () => {\n    return (\n      <Toolbar className={toolbar}>\n      <Button\n         {...{\n           key: \"logoHome\",\n           color:\"black\",\n           to: \"/\",\n           component: RouterLink,\n           className: logo\n         }} \n       >\n       {TechieFindLogo}\n       {/* <img src=\"TFlogo.png\" alt=\"logo\"  /> */}\n       </Button>\n      \n       <div className={classes.searchContainer}>\n            <SearchIcon className={classes.searchIcon} />\n            <TextField\n              className={classes.searchInput}\n              onKeyPress={handleSearchKeypress}\n              onChange={handleSearchChange}\n              label=\"search for tradesmen here!\"\n              variant=\"standard\"\n            />\n          </div>\n      <div className={classes.rightSideButtons}>   \n        <div>{getMenuButtons()}</div>\n        <NotificationsDropDownMenu />\n        <TechnicianDropDownMenu></TechnicianDropDownMenu> \n      </div>  \n      </Toolbar>\n    );\n  };\n  \n  const TechieFindLogo = (\n    <Typography variant=\"h6\" component=\"h1\" className={logo}>\n      TradieFind\n    </Typography> \n    );\n\n  const getMenuButtons = () => {\n    return technicianHeaderData.map(({label, href}) => {\n      return (\n        <Button\n          {...{\n            key: label,\n            color:\"black\",\n            to: href,\n            component: RouterLink,\n            className: menuButton\n          }} \n        >\n        {label}\n        </Button>\n      );\n    });\n  };\n\n  return (\n    <header>\n      <AppBar className={header} elevation={0}>\n        {displayDesktop()}\n      </AppBar>\n    </header>\n  );\n}\n\n \n","/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/customerDropDownMenu.js",["204"],"import React from 'react';\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport api from '../../../api';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function CustomerDropDownMenu() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  let history = useHistory();\n\n  const handleProfile = () => {\n    history.push(\"/customer/profile\")\n    handleToggle()\n  }\n\n  const handleAppointments = (event) => {\n    history.push(\"/customer/myappointments\")\n    handleToggle()\n  }\n\n  const handleRatings = (event) => {\n    history.push(\"/customer/completedappointments\")\n    handleToggle()\n  }\n\n  const handleLogout = () => {\n    api.logout().then(res => {\n      console.log(\"res: \",res);\n      \n      localStorage.removeItem('CustomerAccessToken');\n      localStorage.removeItem('UsersName');\n              \n      history.push(\"/\");\n      window.location.reload();\n      alert(res.data.message) ;\n    });\n  }\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n        >\n            <AccountCircleIcon></AccountCircleIcon>\n        </Button>\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem onClick={handleProfile}>My Profile</MenuItem>\n                    <MenuItem onClick={handleAppointments}>My Appointments</MenuItem>\n                    <MenuItem onClick={handleRatings}>Completed Appointments</MenuItem>\n                    <MenuItem onClick={handleLogout}>Logout</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/guestDropDownMenu.js",["205"],"import React, {useState, useRef} from 'react';\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n  menuButton: {\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n    marginLeft: \"20px\",\n\n  },\n}));\n\n \nexport default function GuestDropDownMenu() {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const anchorRef = useRef(null);\n\n  let history = useHistory();\n\n\n\n  const handleCustomerRegister = () => {\n    history.push(\"/customer/register\")\n    handleToggle()\n  }\n\n  const handleTechnicianRegister = () => {\n    history.push(\"/tradesman/register\")\n    handleToggle()\n  }\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          className={classes.menuButton}\n          onClick={handleToggle}\n        >\n            Register\n        </Button>\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem onClick={handleCustomerRegister}>As A Customer</MenuItem>\n                    <MenuItem onClick={handleTechnicianRegister}>As A Tradesman</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/technicianDropDownMenu.js",["206"],"import React from 'react';\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\nimport api from '../../../api';\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function TechnicianDropDownMenu() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  let history = useHistory();\n\n  const handleProfile = () => {\n    history.push(\"/tradesman/profile\")\n    handleToggle()\n  }\n\n  const handleAppointments = (event) => {\n    history.push(\"/tradesman/myschedule\")\n    handleToggle()\n  }\n\n  const approveAppointments = (event) => {\n    history.push(\"/tradesman/tentativeappointments\")\n    handleToggle()\n  }\n\n  const handleLogout = () => {\n    api.logout().then(res => {\n      console.log(\"res: \",res);\n      \n      localStorage.removeItem('TechnicianAccessToken');\n      localStorage.removeItem('UsersName');\n              \n      history.push(\"/\");\n      window.location.reload();\n      alert(res.data.message) ;\n    });\n  }\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n        >\n            <AccountCircleIcon></AccountCircleIcon>\n        </Button>\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                    <MenuItem onClick={handleProfile}>My Profile</MenuItem>\n                    <MenuItem onClick={handleAppointments}>Schedule Management</MenuItem>\n                    <MenuItem onClick={approveAppointments}>Approve Appointments</MenuItem>\n                    <MenuItem onClick={handleLogout}>Logout</MenuItem>\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/technicians/register/register.js",["207","208"],"import React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport api from '../../../../api';\nimport AsynchronousSearchCities from '../../customers/register/citySelect';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport AsynchronousSearchCategories from './categorySelect';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"/\">\n        TradieFind\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(10),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function TechnicianRegister() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [categoryId, setCategoryId] = useState('');\n  const [cityId, setCityId] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [submitting, setSubmitting] = useState(false);\n\n\n  const handleCategoryChange = (event,value) => {\n    let newCategoryId =  value.id;\n    setCategoryId(newCategoryId);\n    console.log('child Category Id: ', newCategoryId);\n  }\n\n  const handleCityChange = (event,value) => {\n    let newCityId =  value.id;\n    setCityId(newCityId);\n    console.log('child City Id: ', newCityId);\n  }\n\n  const handleSubmit = async () => {\n    setSubmitting(true);\n    try {\n     await api.technicianRegister({\n         firstName, lastName, cityId, categoryId, email, password, confirmPassword\n     });\n     history.push('/')\n    }\n    catch {\n     alert('Failed to Register');\n    } \n    finally {\n     setSubmitting(false);\n    }\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000)\n    };\n  /* const handleSubmit = async () => {\n    setSubmitting(true);\n    try {\n     await api.register({\n         firstName, lastName, cityId, email, password, confirmPassword\n     });\n     history.push('/')\n    }\n    catch {\n     alert('Failed to Register');\n    } \n    finally {\n     setSubmitting(false);\n    }\n    setTimeout(() => {\n      setSubmitting(false);\n    }, 3000)\n    }; */\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Register\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                value={firstName}\n                onChange={e => setFirstName(e.target.value)}\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                value={lastName}\n                onChange={e => setLastName(e.target.value)}\n                autoComplete=\"lname\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                autoComplete=\"email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                name=\"password\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                size='small'\n                required\n                fullWidth\n                name=\"confirmPassword\"\n                value={confirmPassword}\n                onChange={e => setConfirmPassword(e.target.value)}\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirmPassword\"\n                autoComplete=\"current-confirm-password\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n            <AsynchronousSearchCategories handleChange={handleCategoryChange} ></AsynchronousSearchCategories>\n            </Grid>\n            <Grid item xs={12}>\n            <AsynchronousSearchCities handleChange={handleCityChange} ></AsynchronousSearchCities>\n            </Grid>\n            {/* <Grid item xs={12}>\n              <FormControlLabel\n                control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                label=\"I want to receive inspiration, marketing promotions and updates via email.\"\n              />\n            </Grid> */}\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"inherit\"\n            onClick={handleSubmit}\n            className={classes.submit}\n            disabled={submitting}>\n            {submitting? 'Registering...' : 'Register'}\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"http://localhost:3000/login\" variant=\"body2\">\n                Already have an account? Log in !\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/technicians/register/categorySelect.js",[],"/home/alijm/FinalProject/frontend/src/components/headers/customerHeader/notifications.js",["209","210","211"],"import React, { useState } from 'react';\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Badge from '@material-ui/core/Badge';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Echo from 'laravel-echo';\nimport Pusher from 'pusher-js';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function NotificationsDropDownMenu() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [notifications, setNotifications] = useState([]);\n  const [notificationsLength, setNotificationsLength] = useState(0);\n\n  const holderNotif = [];\n\n  const options = {\n    broadcaster: \"pusher\",\n    key: \"9d2040fd9f3ee80d3e21\",\n    cluster: \"eu\",\n    forceTLS: true,\n  \n  };\n  const echo = new Echo(options);\n  echo.channel('appointment-approved').listen('AppointmentApproved', (e) => {\n    console.log('notif: ',e.message);\n    holderNotif.push(e.message);\n    setNotifications(holderNotif);\n    setNotificationsLength(holderNotif.length);\n  })\n\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n        >   <Badge badgeContent={notificationsLength} color=\"primary\">\n                <NotificationsIcon />\n            </Badge>\n        </Button>\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                  {notifications.map((item) => {\n                    return (\n                      <MenuItem>{item} </MenuItem>\n                    )\n                  })}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/customers/search/ratings.js",["212","213","214"],"import React from 'react';\nimport Rating from '@material-ui/lab/Rating';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nexport default function SimpleRating() {\n  const [value, setValue] = React.useState(5);\n\n  return (\n    <div>\n      <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n        <Rating name=\"read-only\"  readOnly />\n      </Box>\n    </div>\n  );\n}",["215","216"],"/home/alijm/FinalProject/frontend/src/components/pages/customers/search/requestAppointment.js",["217"],"/home/alijm/FinalProject/frontend/src/components/pages/technicians/appointments/approvalAppointments.js",["218"],"/home/alijm/FinalProject/frontend/src/components/headers/guestHeader/allTechnicians.js",["219","220","221"],"import React, {useEffect,useState} from 'react';\nimport {useHistory, Redirect} from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport api from '../../../api';\nimport Link from '@material-ui/core/Link';\nimport Rating from '@material-ui/lab/Rating';\nimport Box from '@material-ui/core/Box';\n\n\n\nfunction createData(name, speciality, rating, city, id) {\n  return { name, speciality, rating, city, id };\n}\n\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: \"Name\" },\n  { id: 'speciality', numeric: false, disablePadding: false, label: 'Speciality' },\n  { id: 'rating', numeric: true, disablePadding: false, label: 'Rating' },\n  { id: 'city', numeric: false, disablePadding: false, label: 'City' },\n  { id: 'Appointment', numeric: false, disablePadding: false, label: 'Appointment' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  \n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'center' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    marginLeft: theme.spacing(3.5),\n\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n\n  return (\n    \n    <Toolbar\n      className={clsx(classes.root)}\n    >\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Tradesmen\n        </Typography>\n      \n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      \n    </Toolbar>\n  );\n};\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginTop:theme.spacing(10),\n    marginBottom: theme.spacing(2),\n    opacity:'0.75',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function GuestAllTechnicians() {\n  const classes = useStyles();\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('rating');\n  const [page, setPage] = useState(0);\n  const [dense, setDense] = useState(true);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [rows, setRows] = useState([]);\n\n  const holderData = [];\n\nconst getAllTechniciansData= async () => {\n    await api.getAllTechnicians().then(res => {\n    const techData = res.data.technicians;\n    techData.forEach(obj=>{\n    holderData.push(createData(obj.first_name + ' '+ obj.last_name, obj.category.name, obj.ratings, obj.city.city, obj.id))\n    })\n    })\n    setRows(holderData);\n    console.log('rows: ', rows)\n}\n  useEffect(() => {\n    if(!rows.length) {\n      getAllTechniciansData();\n    }\n  }, [])\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  let history = useHistory();\n\n  const preventDefault = () => {\n    history.push('/tradesman/schedule')\n  }\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      tabIndex={-1}\n                      key={row.id}\n                     \n                    >\n                      <TableCell padding=\"checkbox\">\n                        \n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"left\">{row.speciality}</TableCell>\n                      <TableCell align=\"center\">\n                        <Box component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                          <Rating name=\"read-only\" value={row.rating} readOnly />\n                        </Box>\n                      </TableCell>\n                      <TableCell align=\"left\">{row.city}</TableCell>\n                      <TableCell align=\"left\"><Link component=\"button\" variant=\"body2\" onClick={() => { \n                        if (localStorage.getItem('CustomerAccessToken'))  {\n                          history.push('/' + row.id + '/requestappointment');\n                          } else {\n                            history.push('/login');\n                          }\n                          \n                        }}\n                        >\n                          Request\n                        </Link>\n                        </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/headers/technicianHeader/notifications.js",["222","223","224","225"],"import React, { useState } from 'react';\nimport { Link as RouterLink, useHistory } from \"react-router-dom\";\nimport Button from '@material-ui/core/Button';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Badge from '@material-ui/core/Badge';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nimport { makeStyles } from '@material-ui/core/styles';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Echo from 'laravel-echo';\nimport Pusher from 'pusher-js';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  paper: {\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function NotificationsDropDownMenu() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [notifications, setNotifications] = useState([]);\n  const [notificationsLength, setNotificationsLength] = useState(0);\n  \n  const holderNotif = [];\n  \n  const options = {\n    broadcaster: \"pusher\",\n    key: \"9d2040fd9f3ee80d3e21\",\n    cluster: \"eu\",\n    forceTLS: true,\n  \n  };\n  const echo = new Echo(options);\n  \n  echo.channel('appointment-requested').listen('AppointmentRequested', (e) => {\n    console.log('notif: ',e.message);\n    holderNotif.push(e.message);\n    setNotifications(holderNotif);\n    setNotificationsLength(holderNotif.length);  })\n  let history = useHistory();\n\n  const handleProfile = () => {\n    history.push(\"/customer/profile\")\n    handleToggle()\n  }\n\n  const handleAppointments = (event) => {\n    history.push(\"/customer/myappointments\")\n    handleToggle()\n  }\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  function handleListKeyDown(event) {\n    if (event.key === 'Tab') {\n      event.preventDefault();\n      setOpen(false);\n    }\n  }\n\n  // return focus to the button when we transitioned from !open -> open\n  const prevOpen = React.useRef(open);\n  React.useEffect(() => {\n    if (prevOpen.current === true && open === false) {\n      anchorRef.current.focus();\n    }\n\n    prevOpen.current = open;\n  }, [open]);\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Button\n          ref={anchorRef}\n          aria-controls={open ? 'menu-list-grow' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleToggle}\n        >   <Badge badgeContent={notificationsLength} color=\"primary\">\n                <NotificationsIcon />\n            </Badge>\n        </Button>\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{ transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom' }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList autoFocusItem={open} id=\"menu-list-grow\" onKeyDown={handleListKeyDown}>\n                  {notifications.map((item) => {\n                    return (\n                      <MenuItem>{item}</MenuItem>\n                    )\n                  })}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </div>\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/customers/profile/profile.js",["226","227","228","229","230","231","232"],"import React from 'react';\nimport cx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Divider from '@material-ui/core/Divider';\nimport { useFadedShadowStyles } from '@mui-treasury/styles/shadow/faded';\nimport { useGutterBorderedGridStyles } from '@mui-treasury/styles/grid/gutterBordered';\nimport api from '../../../../api';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: theme.spacing(10),\n    marginRight: theme.spacing(14)\n  } ,\n  card: {\n    borderRadius: 12,\n    minWidth: 256,\n    backgroundColor: 'transparent',\n    /* textAlign: 'left', */\n  },\n  avatar: {\n    width: 90,\n    height: 90,\n    margin: 'left',\n  },\n  heading: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    letterSpacing: '0.5px',\n    marginTop: 8,\n    marginBottom: 0,\n    margin:'left',\n  },\n  subheader: {\n    fontSize: 14,\n    color: \"grey\",\n    marginBottom: '0.875em',\n  },\n  descriptionSubheader: {\n    fontSize: 14,\n    color: \"grey\",\n    marginBottom: '0.875em',\n    textAlign: 'center',\n  },\n  description: {\n    fontSize: 14,\n    color: \"grey\",\n    marginBottom: '0.875em',\n    textAlign:'center',\n  },\n  statLabel: {\n    fontSize: 12,\n    color: \"grey\",\n    fontWeight: 500,\n    fontFamily:\n      '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',\n    margin: 0,\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 4,\n    letterSpacing: '1px',\n  },\n}));\n\nexport const CustomerProfile = React.memo(function ProfileCard() {\n  const styles = useStyles();\n  const shadowStyles = useFadedShadowStyles();\n  const [id, setId] = React.useState('');\n  const [name, setName] = React.useState('');\n  const [city, setCity] = React.useState(''); \n  const [residence, setResidence] = React.useState('');\n  const borderedGridStyles = useGutterBorderedGridStyles({\n    borderColor: 'rgba(0, 0, 0, 0.08)',\n    height: '50%',\n  });\n\n  /* setId(localStorage.getItem('UsersId')); */\n  const handleCustomerInfo = async (id) => {\n  \n    try {\n      await api.getCustomerProfile({id})\n      .then(res=> {\n        if (!res.data.userInfo.id) {\n          alert('no user info found!')\n          console.log('app. data: ', res.data)\n        }\n        else {\n          console.log(\"appt. data: \", res.data)\n          setName(res.data.userInfo.first_name + ' ', res.data.userInfo.last_name);\n          setCity(res.data.userInfo.city_id);\n        }\n    });\n    }\n    catch {\n      alert('Failed to Approve');\n    } \n    finally {\n    }\n  };\n\n  /* handleCustomerInfo(id) */\n  return (\n    <Container className={styles.container}>\n    <Card className={cx(styles.card, shadowStyles.root)}>\n      <CardContent>\n      <Box display={'flex'}>\n        <Box p={2} flex={'auto'} className={borderedGridStyles.item}>\n        <Avatar className={styles.avatar} src={'/assets/aliMakkawi.jpg'} />\n        <h3 className={styles.heading}>Ali Makkawi</h3>\n        </Box>\n        <Box p={2} flex={'auto'} className={borderedGridStyles.item}>\n        <h3 className={styles.descriptionSubheader}>Residence</h3>\n        <p className={styles.description}> Maarad Street, behind Max , Monalisa Bldg.</p>\n        </Box>\n      </Box>\n      </CardContent>\n      <Divider light />\n      <Box display={'flex'}>\n        <Box p={2} flex={'auto'} className={borderedGridStyles.item}>\n          <p className={styles.statLabel}>City</p>\n          <p className={styles.statValue}>Tripoli</p>\n        </Box>\n      </Box>\n    </Card>\n    </Container>\n  );\n});\n\nexport default CustomerProfile","/home/alijm/FinalProject/frontend/src/components/pages/technicians/profiles/profile.js",[],"/home/alijm/FinalProject/frontend/src/components/pages/customers/appointments/completedAppointments.js",["233","234","235","236","237","238","239","240"],"import React, {useState, useEffect} from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport api from '../../../../api';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Switch from '@material-ui/core/Switch';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Rating from '@material-ui/lab/Rating';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\n\n\n\n\nfunction createData(id, name, description, location, startDate, endDate) {\n  return { id, name, description, location, startDate, endDate };\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'name', numeric: false, disablePadding: true, label: \"Name\" },\n  { id: 'description', numeric: false, disablePadding: false, label: 'Description' },\n  { id: 'location', numeric: false, disablePadding: false, label: 'Location' },\n  { id: 'startDate', numeric: true, disablePadding: false, label: 'Start Date' },\n  { id: 'endDate', numeric: true, disablePadding: false, label: 'End Date' },\n  { id: 'rateExperience', numeric: true, disablePadding: false, label: 'Rate Your Experience' },\n];\n\nfunction EnhancedTableHead(props) {\n  const { classes, order, orderBy, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n  \n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'center' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    marginLeft: theme.spacing(3.5),\n\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n\n  return (\n    \n    <Toolbar\n      className={clsx(classes.root)}\n    >\n        <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Completed Appointments\n        </Typography>\n      \n        <Tooltip title=\"Filter list\">\n          <IconButton aria-label=\"filter list\">\n            <FilterListIcon />\n          </IconButton>\n        </Tooltip>\n      \n    </Toolbar>\n  );\n};\n\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginTop:theme.spacing(10),\n    marginBottom: theme.spacing(2),\n    opacity:'0.75',\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function CompletedAppointments() {\n  const classes = useStyles();\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('rating');\n  const [page, setPage] = useState(0);\n  const [dense, setDense] = useState(false);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [loading, setLoading] = useState(false);\n  const [rows,setRows] = useState([]);\n  const [approveText, setApproveText] = useState('Approve');\n\n  const holderData = [];\n\n  const getUnapprovedAppointments= () => {\n\n    holderData.push(createData(1, 'Omar' + ' ' + 'Kabbara', 'Check water leakage', 'Maarad street , Monalisa bldg., 2nd floor', '2021-01-14 11:00:00', '2021-01-14 12:00:00\t'))\n\n    setRows(holderData);\n    }\n       \n\n    \n    \n\n  const handleApproveAppointment = async (id) => {\n    setLoading(true);\n    try {\n      setApproveText('Approving');\n      await api.approveAppointment({id})\n      .then(res=> {\n        if (!res.data.appointment.id) {\n          alert('no appointment found!')\n          console.log('app. data: ', res.data)\n        }\n        else {\n          console.log(\"appt. data: \", res.data)\n        }\n    });\n    }\n    catch {\n      alert('Failed to Approve');\n    } \n    finally {\n      setLoading(true);\n      setApproveText('Approved');\n    }\n  };\n\n  useEffect(() => {\n    if(!rows.length) {\n      getUnapprovedAppointments();\n    }\n  }, [])\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleChangeDense = (event) => {\n    setDense(event.target.checked);\n  };\n\n  let history = useHistory();\n\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={dense ? 'small' : 'medium'}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      tabIndex={-1}\n                      key={row.id}\n                     \n                    >\n                      <TableCell padding=\"checkbox\">\n                        \n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"left\">{row.description}</TableCell>\n                      <TableCell align=\"left\">{row.location}</TableCell>\n                      <TableCell align=\"center\">{row.startDate}</TableCell>\n                      <TableCell align=\"center\">{row.endDate}</TableCell>\n                      <TableCell align='center'>\n                        <Rating\n                        name=\"customized-empty\"\n                        defaultValue={2}\n                         precision={0.5}\n                        emptyIcon={<StarBorderIcon fontSize=\"inherit\" />}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n      <FormControlLabel\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\n        label=\"Dense padding\"\n      />\n    </div>\n  );\n}","/home/alijm/FinalProject/frontend/src/components/pages/customers/chat/chat.js",["241"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport api from '../../../../api';\nimport Echo from 'laravel-echo';\nimport Pusher from 'pusher-js';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    opacity:'0.90',\n    marginLeft: theme.spacing(5)\n\n  },\n  table: {\n    marginTop: theme.spacing(7)\n  },\n  Title: {\n    marginLeft: theme.spacing(2),\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n  },\n  chattersList: {\n    \n  },\n  chatSection: {\n    width: '95%',\n    height: '80vh'\n  },\n  messagesName: {\n    \n    marginRight: theme.spacing(20)\n  },\n  headBG: {\n      backgroundColor: '#e0e0e0'\n    \n  },\n  borderRight500: {\n      borderRight: '1px solid #e0e0e0'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  sendIcon: {\n    marginBottom: theme.spacing(200)\n  }\n}));\n\n\nconst CustomerChat = () => {\n  const classes = useStyles();\n  const [currentTechnicianId, setCurrentTechnicianId] = useState(null);\n  const [currentTechnicianName, setCurrentTechnicianName] = useState('');\n  const [search, setSearch] = useState('');\n  const [technicians, setTechnicians] = useState([]);\n  const [technicianMessages, setTechnicianMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const [instantMessages, setInstantMessages] = useState([]);\n  \n  const userId = localStorage.getItem('UsersId');\n\n  const holderMessages = [];\n\n  const options = {\n    broadcaster: \"pusher\",\n    key: \"9d2040fd9f3ee80d3e21\",\n    cluster: \"eu\",\n    forceTLS: true,\n  \n  };\n  const echo = new Echo(options);\n  echo.channel('messages-sent-to-user'+userId).listen('MessageSentToUser', (e) => {\n    console.log('notif: ',e.message);\n    holderMessages.push(e.message);\n    setInstantMessages(holderMessages);\n  })\n\n  const handleEnterSearchKeypress = (e) => {\n    //it triggers by pressing the enter key\n    if (e.key === 'Enter') {\n       (async() => {\n           try {\n               await api.searchForTechnicians(search).then(res => {\n                    const techniciansData = res.data;\n                    setTimeout (() =>{\n                        setTechnicians(techniciansData.technicians);\n                        console.log('techncians search: ', technicians);\n                    }, 600)\n                 \n                    console.log('techncians data: ', techniciansData);   \n               })\n            }\n            catch {\n              alert('Failed to search for tradesmen.');  \n            }\n        })();  \n    \n    }\n    \n  };\n  const handleSendKeypress = async () => {\n    try {\n        await api.customerSendMessage({\n             userId,currentTechnicianId,newMessage\n        });\n        handleGetMessages(userId,currentTechnicianId);\n       }\n       catch {\n        alert('Failed to send message');\n       }\n        \n  };\n  \n const handleGetMessages = async (user_id,technician_id) => {\n\n    try {\n        await api.getMessagesFromTechnician({\n             user_id,technician_id\n        }).then(res=> {\n              const messages = res.data.messages;\n              setTechnicianMessages(messages.reverse());\n              console.log('messages: ', technicianMessages)\n        });\n       }\n       catch {\n        alert('Failed to get messages');\n       }\n }\n\n  return (\n      <div className={classes.root}>\n        <Grid className={classes.table} container>\n            <Grid item xs={12} >\n                <Typography variant=\"h6\" className={classes.Title}>Messages</Typography>\n            </Grid>\n        </Grid>\n        <Grid container component={Paper} className={classes.chatSection}>\n            <Grid item xs={3} className={classes.borderRight500}>               \n                <Grid item xs={12} style={{padding: '10px'}}>\n                    <TextField \n                    id=\"tradesman-search\" \n                    label=\"Search for a tradesman to message! \" \n                    variant=\"outlined\" \n                    onChange={e => setSearch(e.target.value)}\n                    onKeyPress={handleEnterSearchKeypress}\n                    fullWidth />\n                </Grid>\n                    <Divider />\n                <List className={classes.chattersList}>\n                    {technicians.map((technician) => {\n                        return (\n                            <ListItem \n                                button\n                                value={technician.first_name + ' ' + technician.last_name} \n                                id={technician.id} \n                                onClick={() => {\n                                setCurrentTechnicianName(technician.first_name + ' ' + technician.last_name);\n                                setCurrentTechnicianId(technician.id);\n                                handleGetMessages(userId,technician.id)}}\n                            >\n                                <ListItemIcon>\n                                    <Avatar alt=\"Remy Sharp\"  />\n                                </ListItemIcon>\n                                <ListItemText primary={technician.first_name + ' ' + technician.last_name}></ListItemText>\n                            </ListItem>\n                        )\n                    })}\n                    {instantMessages.map((message) => {\n                        return(\n                        <ListItem id={message.id}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" }>{message.content}</ListItemText>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" } secondary={message.created_at.substr(11, 5)}></ListItemText>\n                                </Grid>\n                            </Grid>\n                        </ListItem>\n                        )\n                    })}\n                </List>\n            </Grid>\n            <Grid item xs={9}>\n            <List className={classes.messageArea}>\n            <Typography className={classes.messagesName} variant=\"h6\" primary =\" Omar Kabbara\">\n            &nbsp;{currentTechnicianName}\n            </Typography>\n            <Divider />\n                    {technicianMessages.map((message) => {\n                        return(\n                        <ListItem id={message.id}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 1 ? \"right\" : \"left\" }>{message.content}</ListItemText>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 1 ? \"right\" : \"left\" } secondary={message.created_at.substr(11, 5)}></ListItemText>\n                                </Grid>\n                            </Grid>\n                        </ListItem>\n                        )\n                    })}    \n                </List>\n                <Divider />\n                <Grid container style={{padding: '20px'}}>\n                    <Grid item xs={11}>\n                        <TextField \n                        id=\"messageField\" \n                        value={newMessage}\n                        onChange={e => setNewMessage(e.target.value)} label=\"Type a message.\" fullWidth />\n                    </Grid>\n                    \n                    <Grid xs={1}  align=\"center\">\n                        <Fab  size =\"medium\" className={classes.sendIcon} color=\"primary\" onClick={handleSendKeypress} aria-label=\"add\"><SendIcon /></Fab>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n      </div>\n  );\n}\n\nexport default CustomerChat;","/home/alijm/FinalProject/frontend/src/components/pages/technicians/chat/chat.js",["242","243"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport Fab from '@material-ui/core/Fab';\nimport SendIcon from '@material-ui/icons/Send';\nimport api from '../../../../api';\nimport Echo from 'laravel-echo';\nimport Pusher from 'pusher-js';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    opacity:'0.90',\n    marginLeft: theme.spacing(5)\n\n  },\n  table: {\n    marginTop: theme.spacing(7)\n  },\n  Title: {\n    marginLeft: theme.spacing(2),\n    fontFamily: \"Open Sans, sans-serif\",\n    fontWeight: 700,\n    size: \"18px\",\n  },\n  chattersList: {\n    \n  },\n  chatSection: {\n    width: '95%',\n    height: '80vh'\n  },\n  messagesName: {\n    \n    marginRight: theme.spacing(20)\n  },\n  headBG: {\n      backgroundColor: '#e0e0e0'\n    \n  },\n  borderRight500: {\n      borderRight: '1px solid #e0e0e0'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  sendIcon: {\n    marginBottom: theme.spacing(200)\n  }\n}));\n\n\nconst TechnicianChat = () => {\n  const classes = useStyles();\n  const [currentCustomerId, setCurrentCustomerId] = useState(null);\n  const [currentCustomerName, setCurrentCustomerName] = useState('');\n  const [customers, setCustomers] = useState([]);\n  const [customerMessages, setCustomerMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState('');\n  const[instantMessages, setInstantMessages] = useState([]);\n\n  const technicianId = localStorage.getItem('UsersId');\n\n  const holderMessages = [];\n\n  const options = {\n    broadcaster: \"pusher\",\n    key: \"9d2040fd9f3ee80d3e21\",\n    cluster: \"eu\",\n    forceTLS: true,\n  \n  };\n  const echo = new Echo(options);\n  echo.channel('messages-sent-to-technician'+technicianId).listen('MessageSentToTechnician', (e) => {\n    console.log('notif: ',e.message);\n    holderMessages.push(e.message);\n    setInstantMessages(holderMessages);\n  })\n  \n  const handleSendKeypress = async () => {\n    try {\n        await api.technicianSendMessage({\n             technicianId,currentCustomerId,newMessage\n        });\n        handleGetMessages(technicianId,currentCustomerId);\n       }\n       catch {\n        alert('Failed to send message');\n       }\n        \n  };\n  \n  async function loadUsers() {\n    try {\n      await api.getUsers(technicianId).then(res => {\n           const customerData = res.data;\n           setTimeout (() =>{\n               setCustomers(customerData.users);\n               console.log('techncians search: ', customers);\n           }, 600)\n        \n           console.log('techncians data: ', customerData);   \n      })\n   }\n   catch {\n     alert('Failed to get users.');  \n   }\n\n  }\n const handleGetMessages = async (technician_id,user_id) => {\n\n    try {\n        await api.getMessagesFromUser({\n             technician_id,user_id\n        }).then(res=> {\n              const messages = res.data.messages;\n              setCustomerMessages(messages.reverse());\n              console.log('messages: ', customerMessages)\n        });\n       }\n       catch {\n        alert('Failed to get messages');\n       }\n }\n \n useEffect(() => {\n  \n  loadUsers();\n \n}, []);\n  return (\n      <div className={classes.root}>\n        <Grid className={classes.table} container>\n            <Grid item xs={12} >\n                <Typography variant=\"h6\" className={classes.Title}>Messages</Typography>\n            </Grid>\n        </Grid>\n        <Grid container component={Paper} className={classes.chatSection}>\n          <Grid item xs={3} className={classes.borderRight500}>\n                <List className={classes.chattersList}>\n                    {customers.map((customer) => {\n                        return (\n                            <ListItem \n                                button\n                                value={customer.first_name + ' ' + customer.last_name} \n                                id={customer.id} \n                                onClick={() => {\n                                setCurrentCustomerName(customer.first_name + ' ' + customer.last_name);\n                                setCurrentCustomerId(customer.id);\n                                handleGetMessages(technicianId,customer.id)}}\n                            >\n                                <ListItemIcon>\n                                    <Avatar alt=\"Remy Sharp\"  />\n                                </ListItemIcon>\n                                <ListItemText primary={customer.first_name + ' ' + customer.last_name}></ListItemText>\n                            </ListItem>\n                        )\n                    })}\n                </List>\n            </Grid>\n            <Grid item xs={9}>\n            <List className={classes.messageArea}>\n            <Typography className={classes.messagesName} variant=\"h6\" primary =\" Omar Kabbara\">\n            &nbsp;{currentCustomerName}\n            </Typography>\n            <Divider />\n                    {customerMessages.map((message) => {\n                        return(\n                        <ListItem id={message.id}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" }>{message.content}</ListItemText>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" } secondary={message.created_at.substr(11, 5)}></ListItemText>\n                                </Grid>\n                            </Grid>\n                        </ListItem>\n                        )\n                    })}\n                    {instantMessages.map((message) => {\n                        return(\n                        <ListItem id={message.id}>\n                            <Grid container>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" }>{message.content}</ListItemText>\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <ListItemText align={message.sent_by_user === 0 ? \"right\" : \"left\" } secondary={message.created_at.substr(11, 5)}></ListItemText>\n                                </Grid>\n                            </Grid>\n                        </ListItem>\n                        )\n                    })}    \n                </List>\n                <Divider />\n                <Grid container style={{padding: '20px'}}>\n                    <Grid item xs={11}>\n                        <TextField \n                        id=\"messageField\" \n                        value={newMessage}\n                        onChange={e => setNewMessage(e.target.value)} label=\"Type a message.\" fullWidth />\n                    </Grid>\n                    \n                    <Grid xs={1}  align=\"center\">\n                        <Fab  size =\"medium\" className={classes.sendIcon} color=\"primary\" onClick={handleSendKeypress} aria-label=\"add\"><SendIcon /></Fab>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n      </div>\n  );\n}\n\nexport default TechnicianChat;","/home/alijm/FinalProject/frontend/src/components/pages/customers/appointments/schedule.js",["244"],"import React,{useEffect, useState, useCallback} from 'react';\nimport api from '../../../../api';\nimport Paper from '@material-ui/core/Paper';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport LocationOn from '@material-ui/icons/LocationOn';\nimport Close from '@material-ui/icons/Close';\nimport CalendarToday from '@material-ui/icons/CalendarToday';\nimport Create from '@material-ui/icons/Create';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles , makeStyles} from '@material-ui/core/styles';\nimport {\n  ViewState,\n  EditingState,\n} from '@devexpress/dx-react-scheduler';\nimport { connectProps } from '@devexpress/dx-react-core';\nimport { KeyboardDateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport MomentUtils from '@date-io/moment';\nimport {\n  Scheduler,\n  MonthView,\n  WeekView,\n  DayView,\n  Appointments,\n  Toolbar,\n  DateNavigator,\n  ViewSwitcher,\n  AppointmentForm,\n  AppointmentTooltip,\n  TodayButton,\n} from '@devexpress/dx-react-scheduler-material-ui';\n\nconst getAppointments= async (setData, setLoading) => {\n    setLoading(true);\n    const userId =localStorage.getItem('UsersId');\n    try {\n      await api.getCustomerAppointments({\n           userId\n      }).then(res=> {\n            const data = res.data;\n            setTimeout (() =>{\n                setData(data.appointments)\n                setLoading(false);\n            }, 600)\n      });\n     }\n     catch {\n      alert('Failed to get appointments');\n     }\n  }\nconst styles =  makeStyles((theme) => ({ \n   paper: {\n    marginTop: theme.spacing(10),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    opacity: '0.8',\n  },\n  toolbarRoot: {\n    position: 'relative',\n  },\n  progress: {\n    position: 'absolute',\n    width: '100%',\n    bottom: 0,\n    left: 0,\n  },\n}));\n\nconst containerStyles = theme => ({\n  container: {\n    width: theme.spacing(68),\n    padding: 0,\n    paddingBottom: theme.spacing(2),\n  },\n  content: {\n    padding: theme.spacing(2),\n    paddingTop: 0,\n  },\n  header: {\n    overflow: 'hidden',\n    paddingTop: theme.spacing(0.5),\n  },\n  closeButton: {\n    float: 'right',\n  },\n  buttonGroup: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 2),\n  },\n  button: {\n    marginLeft: theme.spacing(2),\n  },\n  picker: {\n    marginRight: theme.spacing(2),\n    '&:last-child': {\n      marginRight: 0,\n    },\n    width: '50%',\n  },\n  wrapper: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1, 0),\n  },\n  icon: {\n    margin: theme.spacing(2, 0),\n    marginRight: theme.spacing(2),\n  },\n  textField: {\n    width: '100%',\n  },\n});\n\nconst ToolbarWithLoading = withStyles(styles, { name: 'Toolbar' })(\n  ({ children, classes, ...restProps }) => (\n    <div className={classes.toolbarRoot}>\n      <Toolbar.Root {...restProps}>\n        {children}\n      </Toolbar.Root>\n      <LinearProgress className={classes.progress} />\n    </div>\n  ),\n);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\ntoday = yyyy + '-' + mm + '-' + dd ;\n\n\nconst mapAppointmentData = appointment => ({\n  id: appointment.id,\n  startDate: new Date(appointment.startDate.split(/[- :]/)[0], appointment.startDate.split(/[- :]/)[1]-1, \n  appointment.startDate.split(/[- :]/)[2], appointment.startDate.split(/[- :]/)[3], appointment.startDate.split(/[- :]/)[4], \n  appointment.startDate.split(/[- :]/)[5]),\n  endDate: new Date(appointment.endDate.split(/[- :]/)[0], appointment.endDate.split(/[- :]/)[1]-1, \n  appointment.endDate.split(/[- :]/)[2], appointment.endDate.split(/[- :]/)[3], appointment.endDate.split(/[- :]/)[4], \n  appointment.endDate.split(/[- :]/)[5]),\n  title: appointment.title,\n  location: appointment.location,\n});\n\nconst initialState = {\n  data: [],\n  loading: false,\n  currentDate: today,\n  currentViewName: 'Week',\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'setLoading':\n      return { ...state, loading: action.payload };\n    case 'setData':\n      return { ...state, data: action.payload.map(mapAppointmentData) };\n    case 'setCurrentViewName':\n      return { ...state, currentViewName: action.payload };\n    case 'setCurrentDate':\n      return { ...state, currentDate: action.payload };\n    default:\n      return state;\n  }\n};\nclass AppointmentFormContainerBasic extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      appointmentChanges: {},\n    };\n\n    this.getAppointmentData = () => {\n      const { appointmentData } = this.props;\n      return appointmentData;\n    };\n    this.getAppointmentChanges = () => {\n      const { appointmentChanges } = this.state;\n      return appointmentChanges;\n    };\n\n    this.changeAppointment = this.changeAppointment.bind(this);\n    this.commitAppointment = this.commitAppointment.bind(this);\n  }\n\n  changeAppointment({ field, changes }) {\n    const nextChanges = {\n      ...this.getAppointmentChanges(),\n      [field]: changes,\n    };\n    this.setState({\n      appointmentChanges: nextChanges,\n    });\n  }\n\n  commitAppointment(type) {\n    const { commitChanges } = this.props;\n    const appointment = {\n      ...this.getAppointmentData(),\n      ...this.getAppointmentChanges(),\n    };\n    if (type === 'deleted') {\n      commitChanges({ [type]: appointment.id });\n    } else if (type === 'changed') {\n      commitChanges({ [type]: { [appointment.id]: appointment } });\n    } else {\n      commitChanges({ [type]: appointment });\n    }\n    this.setState({\n      appointmentChanges: {},\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      visible,\n      visibleChange,\n      appointmentData,\n      target,\n      onHide,\n    } = this.props;\n    const { appointmentChanges } = this.state;\n\n    const displayAppointmentData = {\n      ...appointmentData,\n      ...appointmentChanges,\n    };\n\n    const applyChanges = () => this.commitAppointment('changed');\n\n    const textEditorProps = field => ({\n      variant: 'outlined',\n      onChange: ({ target: change }) => this.changeAppointment({\n        field: [field], changes: change.value,\n      }),\n      value: displayAppointmentData[field] || '',\n      label: field[0].toUpperCase() + field.slice(1),\n      className: classes.textField,\n    });\n\n    const pickerEditorProps = field => ({\n      className: classes.picker,\n      // keyboard: true,\n      ampm: false,\n      value: displayAppointmentData[field],\n      onChange: date => this.changeAppointment({\n        field: [field], changes: date ? date.toDate() : new Date(displayAppointmentData[field]),\n      }),\n      inputVariant: 'outlined',\n      format: 'DD/MM/YYYY HH:mm',\n      onError: () => null,\n    });\n\n    const cancelChanges = () => {\n      this.setState({\n        appointmentChanges: {},\n      });\n      visibleChange();\n    };\n\n    return (\n      <AppointmentForm.Overlay\n        visible={visible}\n        target={target}\n        fullSize\n        onHide={onHide}\n      >\n        <div>\n          <div className={classes.header}>\n            <IconButton\n              className={classes.closeButton}\n              onClick={cancelChanges}\n            >\n              <Close color=\"action\" />\n            </IconButton>\n          </div>\n          <div className={classes.content}>\n            <div className={classes.wrapper}>\n              <Create className={classes.icon} color=\"action\" />\n              <TextField\n                {...textEditorProps('title')}\n              />\n            </div>\n            <div className={classes.wrapper}>\n              <CalendarToday className={classes.icon} color=\"action\" />\n              <MuiPickersUtilsProvider utils={MomentUtils}>\n                <KeyboardDateTimePicker\n                  label=\"Start Date\"\n                  {...pickerEditorProps('startDate')}\n                />\n                <KeyboardDateTimePicker\n                  label=\"End Date\"\n                  {...pickerEditorProps('endDate')}\n                />\n              </MuiPickersUtilsProvider>\n            </div>\n            <div className={classes.wrapper}>\n              <LocationOn className={classes.icon} color=\"action\" />\n              <TextField\n                {...textEditorProps('location')}\n              />\n            </div>\n          </div>\n          <div className={classes.buttonGroup}>\n              <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                onClick={() => {\n                  visibleChange();\n                  this.commitAppointment('deleted');\n                }}\n              >\n                Delete\n              </Button>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                className={classes.button}\n                onClick={() => {\n                visibleChange();\n                applyChanges();\n                }}\n            >\n             Save\n            </Button>\n          </div>\n        </div>\n      </AppointmentForm.Overlay>\n    );\n  }\n}\nconst AppointmentFormContainer = withStyles(containerStyles, { name: 'AppointmentFormContainer' })(AppointmentFormContainerBasic);\n\nexport default function CustomerSchedule() {\n  const classes = styles();\n  const [confirmationVisible, setConfirimationVisible] = useState(false);\n  const [editingFormVisible, setEditingFormVisible] = useState(false);\n  const [deletedAppointmentId, setDeletedAppointmentId] = useState(undefined);\n  const [editingAppointment, setEditingAppointment] = useState(undefined);\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const {\n    data, loading, currentViewName, currentDate,\n  } = state;\n\n  const setCurrentViewName = useCallback(nextViewName => dispatch({\n    type: 'setCurrentViewName', payload: nextViewName,\n  }), [dispatch]);\n  const setData = useCallback(nextData => dispatch({\n    type: 'setData', payload: nextData,\n  }), [dispatch]);\n  const setCurrentDate = useCallback(nextDate => dispatch({\n    type: 'setCurrentDate', payload: nextDate,\n  }), [dispatch]);\n  const setLoading = useCallback(nextLoading => dispatch({\n    type: 'setLoading', payload: nextLoading,\n  }), [dispatch]);\n\n  const commitChanges = ({ changed, deleted }) => {\n    if (changed) { //send request to edit here \n      const updatedData = data.map(appointment => (\n        changed[appointment.id] ? { ...appointment, ...changed[appointment.id] } : appointment));\n     \n      var results = updatedData.filter(appointment1 => \n        !data.some(appointment2 => (appointment2.id === appointment1.id \n          && appointment2.title === appointment1.title \n          && appointment2.startDate === appointment1.startDate\n          && appointment2.endDate === appointment1.endDate\n          && appointment2.location === appointment1.location)))\n          \n          console.log('results: ',results)\n      if(results.length === 1) {\n        const changedAppointment = results[0];\n        const MOMENT= require( 'moment' );\n        const newStartDate = MOMENT(changedAppointment.startDate).format( 'YYYY-MM-DD  HH:mm:ss.000' );\n        const newEndDate = MOMENT(changedAppointment.endDate).format( 'YYYY-MM-DD  HH:mm:ss.000' );\n        const id = changedAppointment.id;\n        const newLocation = changedAppointment.location;\n        const newTitle = changedAppointment.title;\n     \n        console.log('new StartDate: ', newStartDate);\n        console.log('new EndDate: ', newEndDate);\n        console.log('results: ', results);\n        console.log('results title: ', results[0].title);\n          \n        (async () => {\n          try {\n            await api.customerEditAppointment({id, newTitle, newStartDate, newEndDate, newLocation });\n          \n          }\n          catch {\n            alert('Failed to update appointment');\n          } \n        })();\n\n        getAppointments(setData, setLoading);\n      }\n    };\n    if (deleted !== undefined) {\n      setDeletedAppointmentId(deleted);\n      toggleConfirmationVisible();\n    }\n  \n  }\n  const toggleEditingFormVisibility = () => {\n    setEditingFormVisible(!editingFormVisible);\n  }\n\n  const toggleConfirmationVisible = () => {\n    setConfirimationVisible(!confirmationVisible);\n  }\n  const onEditingAppointmentChange = (editingAppointment) => {\n    setEditingAppointment(editingAppointment);\n  }\n\n  const appointmentForm = connectProps(AppointmentFormContainer, () => {\n\n    const currentAppointment = data\n      .filter(appointment => editingAppointment && appointment.id === editingAppointment.id)[0];\n\n    return {\n      visible: editingFormVisible,\n      appointmentData: currentAppointment,\n      commitChanges: commitChanges,\n      visibleChange: toggleEditingFormVisibility,\n      onEditingAppointmentChange: onEditingAppointmentChange ,\n    };\n  });\n  \n\n  const commitDeletedAppointment = async () => {\n    \n      const appointmentToDelete = data.filter(appointment => appointment.id === deletedAppointmentId);\n      const appointmentToDeleteId = appointmentToDelete[0].id;\n      console.log('appointment To Delete:', appointmentToDeleteId)\n      toggleConfirmationVisible();\n      try {\n        await api.customerDeleteAppointment(\n             appointmentToDeleteId\n        )\n        \n           \n       }\n       catch {\n        alert('Failed to delete appointment.');\n       }\n      \n\n      /* return { data: nextData, deletedAppointmentId: null }; */\n    \n    \n    console.log('confirmationVisible: ',confirmationVisible);\n    getAppointments(setData, setLoading);\n  }\n\n  \n  useEffect(() => {\n    getAppointments(setData, setLoading);\n    appointmentForm.update();\n  }, [setData, currentViewName, currentDate]);\n\n  return (\n    <Paper className={classes.paper}>\n      <Scheduler\n        data={data}\n        height={660}\n      >\n        <ViewState\n          currentDate={currentDate}\n          currentViewName={currentViewName}\n          onCurrentViewNameChange={setCurrentViewName}\n          onCurrentDateChange={setCurrentDate}\n        />\n        <EditingState\n            onCommitChanges={commitChanges}\n            onEditingAppointmentChange={onEditingAppointmentChange}\n        />\n        <DayView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <WeekView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <MonthView\n          startDayHour={8}\n          endDayHour={18}\n        />\n        <Appointments />\n        <Toolbar\n          {...loading ? { rootComponent: ToolbarWithLoading } : null}\n        />\n        <DateNavigator />\n        <TodayButton />\n        <ViewSwitcher />\n        <AppointmentTooltip\n          showOpenButton\n          showCloseButton\n        />\n        <AppointmentForm\n          overlayComponent={appointmentForm}\n          visible={editingFormVisible}\n          onVisibilityChange={toggleEditingFormVisibility}\n        />\n        \n        <AppointmentForm  />\n      </Scheduler>\n\n      <Dialog\n          open={confirmationVisible}\n        >\n          <DialogTitle>\n            Delete Appointment\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Are you sure you want to delete this appointment?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={toggleConfirmationVisible} color=\"primary\" variant=\"outlined\">\n              Cancel\n            </Button>\n            <Button onClick={commitDeletedAppointment} color=\"secondary\" variant=\"outlined\">\n              Delete\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Paper>\n  );\n};\n",{"ruleId":"245","replacedBy":"246"},{"ruleId":"247","replacedBy":"248"},{"ruleId":"245","replacedBy":"249"},{"ruleId":"247","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":24},{"ruleId":"251","severity":1,"message":"255","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":16},{"ruleId":"256","severity":1,"message":"257","line":209,"column":6,"nodeType":"258","endLine":209,"endColumn":8,"suggestions":"259"},{"ruleId":"251","severity":1,"message":"260","line":232,"column":9,"nodeType":"253","messageId":"254","endLine":232,"endColumn":23},{"ruleId":"251","severity":1,"message":"261","line":197,"column":11,"nodeType":"253","messageId":"254","endLine":197,"endColumn":19},{"ruleId":"256","severity":1,"message":"262","line":213,"column":6,"nodeType":"258","endLine":213,"endColumn":8,"suggestions":"263"},{"ruleId":"251","severity":1,"message":"260","line":236,"column":9,"nodeType":"253","messageId":"254","endLine":236,"endColumn":23},{"ruleId":"256","severity":1,"message":"264","line":469,"column":6,"nodeType":"258","endLine":469,"endColumn":45,"suggestions":"265"},{"ruleId":"251","severity":1,"message":"266","line":1,"column":16,"nodeType":"253","messageId":"254","endLine":1,"endColumn":24},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"266","line":1,"column":16,"nodeType":"253","messageId":"254","endLine":1,"endColumn":24},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"268","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":16},{"ruleId":"251","severity":1,"message":"269","line":100,"column":10,"nodeType":"253","messageId":"254","endLine":100,"endColumn":16},{"ruleId":"251","severity":1,"message":"270","line":101,"column":10,"nodeType":"253","messageId":"254","endLine":101,"endColumn":18},{"ruleId":"251","severity":1,"message":"271","line":101,"column":20,"nodeType":"253","messageId":"254","endLine":101,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":184,"column":9,"nodeType":"274","messageId":"275","endLine":199,"endColumn":20},{"ruleId":"251","severity":1,"message":"268","line":13,"column":8,"nodeType":"253","messageId":"254","endLine":13,"endColumn":16},{"ruleId":"251","severity":1,"message":"269","line":91,"column":10,"nodeType":"253","messageId":"254","endLine":91,"endColumn":16},{"ruleId":"251","severity":1,"message":"276","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":11},{"ruleId":"251","severity":1,"message":"277","line":13,"column":8,"nodeType":"253","messageId":"254","endLine":13,"endColumn":12},{"ruleId":"251","severity":1,"message":"278","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":16},{"ruleId":"251","severity":1,"message":"268","line":17,"column":8,"nodeType":"253","messageId":"254","endLine":17,"endColumn":16},{"ruleId":"251","severity":1,"message":"269","line":92,"column":10,"nodeType":"253","messageId":"254","endLine":92,"endColumn":16},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"252","line":8,"column":8,"nodeType":"253","messageId":"254","endLine":8,"endColumn":24},{"ruleId":"251","severity":1,"message":"255","line":9,"column":8,"nodeType":"253","messageId":"254","endLine":9,"endColumn":16},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"279","line":2,"column":30,"nodeType":"253","messageId":"254","endLine":2,"endColumn":40},{"ruleId":"251","severity":1,"message":"280","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":14},{"ruleId":"251","severity":1,"message":"281","line":3,"column":8,"nodeType":"253","messageId":"254","endLine":3,"endColumn":18},{"ruleId":"251","severity":1,"message":"282","line":7,"column":10,"nodeType":"253","messageId":"254","endLine":7,"endColumn":15},{"ruleId":"251","severity":1,"message":"283","line":7,"column":17,"nodeType":"253","messageId":"254","endLine":7,"endColumn":25},{"ruleId":"245","replacedBy":"284"},{"ruleId":"247","replacedBy":"285"},{"ruleId":"256","severity":1,"message":"286","line":93,"column":8,"nodeType":"258","endLine":93,"endColumn":10,"suggestions":"287"},{"ruleId":"256","severity":1,"message":"288","line":244,"column":6,"nodeType":"258","endLine":244,"endColumn":8,"suggestions":"289"},{"ruleId":"251","severity":1,"message":"290","line":2,"column":21,"nodeType":"253","messageId":"254","endLine":2,"endColumn":29},{"ruleId":"256","severity":1,"message":"257","line":210,"column":6,"nodeType":"258","endLine":210,"endColumn":8,"suggestions":"291"},{"ruleId":"251","severity":1,"message":"260","line":233,"column":9,"nodeType":"253","messageId":"254","endLine":233,"endColumn":23},{"ruleId":"251","severity":1,"message":"267","line":2,"column":18,"nodeType":"253","messageId":"254","endLine":2,"endColumn":28},{"ruleId":"251","severity":1,"message":"280","line":14,"column":8,"nodeType":"253","messageId":"254","endLine":14,"endColumn":14},{"ruleId":"251","severity":1,"message":"292","line":53,"column":9,"nodeType":"253","messageId":"254","endLine":53,"endColumn":22},{"ruleId":"251","severity":1,"message":"293","line":58,"column":9,"nodeType":"253","messageId":"254","endLine":58,"endColumn":27},{"ruleId":"251","severity":1,"message":"294","line":74,"column":10,"nodeType":"253","messageId":"254","endLine":74,"endColumn":12},{"ruleId":"251","severity":1,"message":"295","line":74,"column":14,"nodeType":"253","messageId":"254","endLine":74,"endColumn":19},{"ruleId":"251","severity":1,"message":"296","line":75,"column":10,"nodeType":"253","messageId":"254","endLine":75,"endColumn":14},{"ruleId":"251","severity":1,"message":"297","line":76,"column":10,"nodeType":"253","messageId":"254","endLine":76,"endColumn":14},{"ruleId":"251","severity":1,"message":"298","line":77,"column":10,"nodeType":"253","messageId":"254","endLine":77,"endColumn":19},{"ruleId":"251","severity":1,"message":"299","line":77,"column":21,"nodeType":"253","messageId":"254","endLine":77,"endColumn":33},{"ruleId":"251","severity":1,"message":"300","line":84,"column":9,"nodeType":"253","messageId":"254","endLine":84,"endColumn":27},{"ruleId":"251","severity":1,"message":"301","line":2,"column":21,"nodeType":"253","messageId":"254","endLine":2,"endColumn":30},{"ruleId":"251","severity":1,"message":"302","line":192,"column":10,"nodeType":"253","messageId":"254","endLine":192,"endColumn":17},{"ruleId":"251","severity":1,"message":"303","line":194,"column":10,"nodeType":"253","messageId":"254","endLine":194,"endColumn":21},{"ruleId":"304","severity":1,"message":"305","line":200,"column":42,"nodeType":"306","messageId":"307","endLine":200,"endColumn":43},{"ruleId":"304","severity":1,"message":"305","line":200,"column":48,"nodeType":"306","messageId":"307","endLine":200,"endColumn":49},{"ruleId":"251","severity":1,"message":"308","line":209,"column":9,"nodeType":"253","messageId":"254","endLine":209,"endColumn":33},{"ruleId":"256","severity":1,"message":"288","line":237,"column":6,"nodeType":"258","endLine":237,"endColumn":8,"suggestions":"309"},{"ruleId":"251","severity":1,"message":"310","line":258,"column":7,"nodeType":"253","messageId":"254","endLine":258,"endColumn":14},{"ruleId":"251","severity":1,"message":"280","line":17,"column":8,"nodeType":"253","messageId":"254","endLine":17,"endColumn":14},{"ruleId":"251","severity":1,"message":"280","line":17,"column":8,"nodeType":"253","messageId":"254","endLine":17,"endColumn":14},{"ruleId":"256","severity":1,"message":"311","line":140,"column":4,"nodeType":"258","endLine":140,"endColumn":6,"suggestions":"312"},{"ruleId":"256","severity":1,"message":"264","line":469,"column":6,"nodeType":"258","endLine":469,"endColumn":45,"suggestions":"313"},"no-native-reassign",["314"],"no-negated-in-lhs",["315"],["314"],["315"],"no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAllTechniciansData' and 'rows.length'. Either include them or remove the dependency array.","ArrayExpression",["316"],"'preventDefault' is assigned a value but never used.","'techData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllTechniciansData', 'holderData', and 'rows.length'. Either include them or remove the dependency array.",["317"],"React Hook useEffect has missing dependencies: 'appointmentForm' and 'setLoading'. Either include them or remove the dependency array.",["318"],"'useState' is defined but never used.","'RouterLink' is defined but never used.","'HelpIcon' is defined but never used.","'filter' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'setAnchorEl' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'api' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'useHistory' is defined but never used.","'Pusher' is defined but never used.","'Typography' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.",["314"],["315"],"React Hook useEffect has a missing dependency: 'id.id'. Either include it or remove the dependency array.",["319"],"React Hook useEffect has missing dependencies: 'getUnapprovedAppointments' and 'rows.length'. Either include them or remove the dependency array.",["320"],"'Redirect' is defined but never used.",["321"],"'handleProfile' is assigned a value but never used.","'handleAppointments' is assigned a value but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'name' is assigned a value but never used.","'city' is assigned a value but never used.","'residence' is assigned a value but never used.","'setResidence' is assigned a value but never used.","'handleCustomerInfo' is assigned a value but never used.","'useParams' is defined but never used.","'loading' is assigned a value but never used.","'approveText' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'handleApproveAppointment' is assigned a value but never used.",["322"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadUsers'. Either include it or remove the dependency array.",["323"],["324"],"no-global-assign","no-unsafe-negation",{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"325","fix":"335"},{"desc":"333","fix":"336"},{"desc":"337","fix":"338"},{"desc":"329","fix":"339"},"Update the dependencies array to be: [getAllTechniciansData, rows.length]",{"range":"340","text":"341"},"Update the dependencies array to be: [getAllTechniciansData, holderData, rows.length]",{"range":"342","text":"343"},"Update the dependencies array to be: [setData, currentViewName, currentDate, setLoading, appointmentForm]",{"range":"344","text":"345"},"Update the dependencies array to be: [id.id]",{"range":"346","text":"347"},"Update the dependencies array to be: [getUnapprovedAppointments, rows.length]",{"range":"348","text":"349"},{"range":"350","text":"341"},{"range":"351","text":"349"},"Update the dependencies array to be: [loadUsers]",{"range":"352","text":"353"},{"range":"354","text":"345"},[6116,6118],"[getAllTechniciansData, rows.length]",[6302,6304],"[getAllTechniciansData, holderData, rows.length]",[14115,14154],"[setData, currentViewName, currentDate, setLoading, appointmentForm]",[2593,2595],"[id.id]",[7131,7133],"[getUnapprovedAppointments, rows.length]",[6121,6123],[6825,6827],[3625,3627],"[loadUsers]",[14107,14146]]